#include "drawing.ulm"
.text
init:
    loadi r24 2
    loadi r25 2025
    loadi r23 27
    loadi r10 9 ; le numero de la pub actuelle

    jmp $refresh_init
main:
    jmp $init

loop:
#ifdef FAST_FORWARD
    jmp $vrai_update_sec
#endif
    loadi r12 1024
    load r12 r12
    sub r12 r1 r12 ; mettre r1 pour que ça test r12 = 1 (ici je fais ça pour pouvoir tester)
    jmp.z $vrai_update_sec ; mettre juste update_sec pour simuler un peu d attente
    jmp $loop

update_sec:
    dec r8 r8
    jmp.z $vrai_update_sec
    jmp $loop

vrai_update_sec:
    loadi r12 1024
    store r12 r0
    inc r20 r20
    loadi r2 60
    sub r2 r2 r20
    jmp.z $update_min
    jmp $refresh_sec

update_min:
    loadi r20 0
    inc r21 r21
    loadi r2 60
    sub r2 r2 r21
    jmp.z $update_hour
    jmp $refresh_min

update_hour:
    loadi r21 0
    loadi r2 24
    inc r22 r22 ; augmente dune heure
    sub r2 r2 r22 ; on regarde si on a atteint 24h
    jmp.z $update_day
    jmp  $refresh_hour

update_day:
    loadi r22 0 ; heure devient 0
    add r23 r23 r1 ; ajoute 1 jour
    loadi r2 2
    sub r2 r2 r24 ; on compare le mois et février
    jmp.z $update_day_feb
    loadi r2 $month_days_table
    add r2 r2 r24
    sub r2 r2 r1 ; On commence au mois 1 donc décalage pour avoir lélément 0
    load r3 r2
    sub r3 r3 r23 ; on compare les jours du mois et le nombre actuel
    jmp.z $update_month
    jmp $refresh_day
    
    
update_day_feb: ; si ici, on est en février
    loadi r2 30
    sub r2 r2 r23
    jmp.z $update_month
    loadi r2 29
    sub r2 r2 r23 ; on regarde si on est au jour 29. Qu on accepte que si bissextile.
    jmp.z $check_bissextile
    jmp $non_bissextile ; si on est pas une année bissextile, on compare à 28
    
check_bissextile:
    loadi r2 $year_mod_400
    load r2 r2
    test r2
    jmp.z $refresh_day
    loadi r2 $year_mod_100
    load r2 r2
    test r2
    jmp.z $non_bissextile
    loadi r2 $year_mod_4
    load r2 r2
    test r2
    jmp.z $refresh_day
    jmp $non_bissextile

non_bissextile:
    loadi r2 29
    sub r2 r2 r23
    jmp.z $update_month
    jmp $refresh_month

update_month:
    loadi r23 1
    add r24 r24 r1
    loadi r2 13
    sub r2 r2 r24
    jmp.z $update_year_mod_400
    jmp $refresh_month


update_year_mod_400:
    loadi r3 $year_mod_400
    load r3 r3
    loadi r4 $year_mod_400
    add r3 r3 r1
    store r4 r3
    loadi r4 400
    sub r2 r3 r4
    jmp.z $reset_year_mod_400
    jmp $update_year_mod_4
reset_year_mod_400:
    loadi r2 $year_mod_400
    store r2 r0
    jmp $update_year_mod_4

update_year_mod_4:
    loadi r3 $year_mod_4
    load r3 r3
    loadi r4 $year_mod_4
    add r3 r3 r1
    store r4 r3
    loadi r4 4
    sub r2 r3 r4
    jmp.z $reset_year_mod_4
    jmp $update_year_mod_100
reset_year_mod_4:
    loadi r3 $year_mod_4
    store r3 r0
    jmp $update_year_mod_100

update_year_mod_100:
    loadi r3 $year_mod_100
    load r3 r3
    loadi r4 $year_mod_100
    add r3 r3 r1
    store r4 r3
    loadi r4 100
    sub r2 r3 r4
    jmp.z $reset_year_mod_100
    jmp $update_year

reset_year_mod_100:
    loadi r3 $year_mod_100
    store r3 r0
    jmp $update_year


update_year:
    loadi r2 1
    add r25 r25 r2
    loadi r24 1
    jmp $refresh_year
.data
month_days_table: 
    .int 32
    .int 0
    .int 32
    .int 31
    .int 32
    .int 31
    .int 32
    .int 32
    .int 31
    .int 32
    .int 31
    .int 32

year_mod_400:
    .int 25 
year_mod_4:
    .int 1
year_mod_100:
    .int 25
